name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    container: 
      image: node:16
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb
      # 외부에 추가적인 MongoDB 클러스터를 만들지 않고도 MongoDB를 사용할 수 있습니다.
      # GitHub Actions가 자동으로 네트워크 환경을 생성하기 때문에
      # services에서 지정한 서비스 컨테이너의 label(mongo)을 바로 지정하여 사용할 수 있습니다.
      MONGODB_CLUSTER_ADDRESS: mongodb
      # 서비스 컨테이너에 사용할 username과 password와 동일하게 지정하면 됩니다.
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080
    # Job 기준으로 서비스 컨테이너를 활용할 수 있습니다.
    services: 
      # 서비스 컨테이너를 식별하기 위한 label을 원하는대로 지정할 수 있습니다.
      mongodb: 
        # image 키는 반드시 필요합니다. 사용해야 할 이미지명을 지정할 수 있습니다.
        image: mongo
        env: 
          # mongo 도커 이미지 공식 문서에서 확인할 수 있는 환경 변수 두 가지를 기입합니다.
          # test Job이 동작하는 동안에만 사용되는 서버로, 환경 변수 값은 원하는대로 설정하면 됩니다.
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
